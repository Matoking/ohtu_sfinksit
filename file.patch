From 6a9d2b4d748f1b9b010539becc3f35ff63dd1f7b Mon Sep 17 00:00:00 2001
From: Katila Nina M <kanikani@da5-cs-bk107-37.helsinki.fi>
Date: Tue, 26 Apr 2016 15:40:12 +0300
Subject: [PATCH] turhat poistettu, generointi omaan luokkaan

---
 .../sfinksit/controller/ArticleController.java     | 24 ++-----
 .../java/sfinksit/controller/BookController.java   |  9 ++-
 .../sfinksit/controller/ConferenceController.java  | 10 ++-
 .../sfinksit/controller/DefaultController.java     | 15 -----
 .../sfinksit/controller/ReferenceController.java   | 45 +++++--------
 src/main/java/sfinksit/domain/Artikkeli.java       | 18 -----
 .../sfinksit/repository/ArtikkeliRepository_1.java |  8 ---
 src/main/java/sfinksit/tools/Generator.java        | 33 ++++++++++
 src/main/resources/templates/create.html           | 77 ----------------------
 src/test/easyb/new_articleReference_creation.story | 22 +++----
 src/test/easyb/new_bookReference_creation.story    | 10 +--
 .../easyb/new_conferenceReference_creation.story   | 10 +--
 12 files changed, 91 insertions(+), 190 deletions(-)
 delete mode 100644 src/main/java/sfinksit/controller/DefaultController.java
 delete mode 100644 src/main/java/sfinksit/domain/Artikkeli.java
 delete mode 100644 src/main/java/sfinksit/repository/ArtikkeliRepository_1.java
 create mode 100644 src/main/java/sfinksit/tools/Generator.java
 delete mode 100644 src/main/resources/templates/create.html

diff --git a/src/main/java/sfinksit/controller/ArticleController.java b/src/main/java/sfinksit/controller/ArticleController.java
index 8664de4..6349919 100644
--- a/src/main/java/sfinksit/controller/ArticleController.java
+++ b/src/main/java/sfinksit/controller/ArticleController.java
@@ -11,23 +11,19 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.servlet.mvc.support.RedirectAttributes;
-import sfinksit.repository.ArticleRepository;
-import sfinksit.repository.ReferenceRepository;
 import sfinksit.domain.Article;
 import sfinksit.domain.Reference;
+import sfinksit.repository.ArticleRepository;
+import sfinksit.repository.ReferenceRepository;
+import sfinksit.tools.Generator;
 
 @Controller
 @RequestMapping("/references/article")
 public class ArticleController {
 
-    private static char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'};
-
     @Autowired
     private ReferenceRepository rep;
 
-    @Autowired
-    private ArticleRepository articlerep;
-
     @RequestMapping(method = RequestMethod.GET)
     public String viewCreatePage(@ModelAttribute Reference reference) {
         return "article";
@@ -43,19 +39,9 @@ public String create(@Valid @ModelAttribute Reference reference, BindingResult b
 
         if (reference.bibtexKey.isEmpty()) {
 
-            String key = reference.bibtexKey = reference.author.substring(0, 1) + reference.year;
-            if (rep.findExistingBibtexKey(key).size()>0) {
-                for (int i = 0; i < 6; i++) {
-                    key = key + alphabet[i];
-                    if (rep.findExistingBibtexKey(key).size()>0) {
-                        key = key.substring(0, key.length() - 1);
-                    } else {
-                        break;
-                    }
+            Generator gen = new Generator();
+            reference.bibtexKey = gen.generate(rep, reference);
 
-                }
-            }
-            reference.bibtexKey = key;
         }
 
         List list = rep.findExistingBibtexKey(reference.bibtexKey);
diff --git a/src/main/java/sfinksit/controller/BookController.java b/src/main/java/sfinksit/controller/BookController.java
index eaa6dee..7fad013 100644
--- a/src/main/java/sfinksit/controller/BookController.java
+++ b/src/main/java/sfinksit/controller/BookController.java
@@ -15,6 +15,7 @@
 import sfinksit.domain.Reference;
 import sfinksit.repository.BookRepository;
 import sfinksit.repository.ReferenceRepository;
+import sfinksit.tools.Generator;
 
 @Controller
 @RequestMapping("/references/createBook")
@@ -23,8 +24,6 @@
     @Autowired
     private ReferenceRepository rep;
     
-    @Autowired
-    private BookRepository bookrep;
     
     @RequestMapping(method=RequestMethod.GET)
     public String viewCreatePage(@ModelAttribute Reference reference) {
@@ -37,6 +36,12 @@ public String create(@Valid @ModelAttribute Reference reference, BindingResult b
         if (bind.hasErrors()) {
             return "createBook";
         }
+         if (reference.bibtexKey.isEmpty()) {
+
+            Generator gen = new Generator();
+            reference.bibtexKey = gen.generate(rep, reference);
+
+        }
         List list = rep.findExistingBibtexKey(reference.bibtexKey);
         if (list.size() > 0){
             model.addAttribute("notvalidBibtexkey", "BibtexKey has to be unique");
diff --git a/src/main/java/sfinksit/controller/ConferenceController.java b/src/main/java/sfinksit/controller/ConferenceController.java
index f7f0927..4c8bae8 100644
--- a/src/main/java/sfinksit/controller/ConferenceController.java
+++ b/src/main/java/sfinksit/controller/ConferenceController.java
@@ -14,6 +14,7 @@
 import sfinksit.domain.Reference;
 import sfinksit.repository.ConferenceRepository;
 import sfinksit.repository.ReferenceRepository;
+import sfinksit.tools.Generator;
 
 @Controller
 @RequestMapping("/references/createConference")
@@ -22,8 +23,6 @@
     @Autowired
     private ReferenceRepository rep;
     
-    @Autowired
-    private ConferenceRepository confrep;
     
     @RequestMapping(method=RequestMethod.GET)
     public String viewCreatePage(@ModelAttribute Reference reference) {
@@ -36,7 +35,12 @@ public String create(@Valid @ModelAttribute Reference reference, BindingResult b
         if (bind.hasErrors()) {
             return "createConference";
         }
-        
+         if (reference.bibtexKey.isEmpty()) {
+
+            Generator gen = new Generator();
+            reference.bibtexKey = gen.generate(rep, reference);
+
+        }
         List list = rep.findExistingBibtexKey(reference.bibtexKey);
         if (list.size() > 0){
             model.addAttribute("notvalidBibtexkey", "BibtexKey has to be unique");
diff --git a/src/main/java/sfinksit/controller/DefaultController.java b/src/main/java/sfinksit/controller/DefaultController.java
deleted file mode 100644
index 056bd72..0000000
--- a/src/main/java/sfinksit/controller/DefaultController.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package sfinksit.controller;
-
-import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-
-@Controller
-@RequestMapping("*")
-public class DefaultController {
-
-    @RequestMapping(method=RequestMethod.GET)
-    public String view() {
-        return "index";
-    }
-}
diff --git a/src/main/java/sfinksit/controller/ReferenceController.java b/src/main/java/sfinksit/controller/ReferenceController.java
index 93dfa12..b6533fd 100644
--- a/src/main/java/sfinksit/controller/ReferenceController.java
+++ b/src/main/java/sfinksit/controller/ReferenceController.java
@@ -16,40 +16,29 @@
 @Controller
 @RequestMapping("*")
 public class ReferenceController {
-    
+
     @Autowired
     private ReferenceRepository rep;
 
-    @RequestMapping(value="/references", method=RequestMethod.GET)
-    public String view(@ModelAttribute Reference ref) {
-        return "create";
-    }
-    
-    @Transactional
-    @RequestMapping(method=RequestMethod.POST)// 
-    public String create(@Valid @ModelAttribute Reference ref, BindingResult bind) {
-        
-        if (bind.hasErrors()) {
-            return "redirect:/references";
-        }
-        rep.save(ref);
-        return "redirect:/";
+    @RequestMapping(method = RequestMethod.GET)
+    public String view() {
+        return "index";
     }
-    
-    @RequestMapping(value="list", method=RequestMethod.GET)
+
+    @RequestMapping(value = "list", method = RequestMethod.GET)
     public String list(Model model) {
         model.addAttribute("references", rep.findAll());
         return "list";
     }
-    
-    @RequestMapping(value="search", method=RequestMethod.GET)
-    public String viewfindThisObject(String name, @ModelAttribute Reference reference){
+
+    @RequestMapping(value = "search", method = RequestMethod.GET)
+    public String viewfindThisObject(String name, @ModelAttribute Reference reference) {
         return "findObject";
     }
-    
-    @RequestMapping(value="search", method=RequestMethod.POST)
-    public String findThisObject(@RequestParam(value = "search") String searchTerm, Model model){
-        if (!validateStringSearch(searchTerm)){
+
+    @RequestMapping(value = "search", method = RequestMethod.POST)
+    public String findThisObject(@RequestParam(value = "search") String searchTerm, Model model) {
+        if (!validateStringSearch(searchTerm)) {
             model.addAttribute("failedSearch", "Hakuehto liian pitkä");
             return "findObject";
         }
@@ -57,11 +46,13 @@ public String findThisObject(@RequestParam(value = "search") String searchTerm,
         model.addAttribute("references", rep.findSearchTermFromAll(searchTerm));
         return "list";
     }
-    
+
     public boolean validateStringSearch(String searchTerm) {
-        if (searchTerm.length() > 20) return false;
+        if (searchTerm.length() > 20) {
+            return false;
+        }
         //injektion mahdollisuus, jos suoraan merkkijonosta tehdään query
         return true;
     }
-    
+
 }
diff --git a/src/main/java/sfinksit/domain/Artikkeli.java b/src/main/java/sfinksit/domain/Artikkeli.java
deleted file mode 100644
index a9580e1..0000000
--- a/src/main/java/sfinksit/domain/Artikkeli.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package sfinksit.domain;
-
-import javax.persistence.Entity;
-import org.springframework.data.jpa.domain.AbstractPersistable;
-
-@Entity
-public class Artikkeli extends AbstractPersistable<Long> {
-    
-    private String kirjoittaja;
-    
-    public String getKirjoittaja() {
-        return this.kirjoittaja;
-    }
-    
-    public void setKirjoittaja(String kirjoittaja) {
-        this.kirjoittaja = kirjoittaja;
-    }
-}
\ No newline at end of file
diff --git a/src/main/java/sfinksit/repository/ArtikkeliRepository_1.java b/src/main/java/sfinksit/repository/ArtikkeliRepository_1.java
deleted file mode 100644
index d7ea69e..0000000
--- a/src/main/java/sfinksit/repository/ArtikkeliRepository_1.java
+++ /dev/null
@@ -1,8 +0,0 @@
-/*package sfinksit.repository;
-
-import org.springframework.data.jpa.repository.JpaRepository;
-import sfinksit.domain.Artikkeli;
-
-public interface ArtikkeliRepository extends JpaRepository<Artikkeli, Long> {
-    
-}*/
\ No newline at end of file
diff --git a/src/main/java/sfinksit/tools/Generator.java b/src/main/java/sfinksit/tools/Generator.java
new file mode 100644
index 0000000..09ca80f
--- /dev/null
+++ b/src/main/java/sfinksit/tools/Generator.java
@@ -0,0 +1,33 @@
+package sfinksit.tools;
+
+import sfinksit.domain.Reference;
+import sfinksit.repository.ReferenceRepository;
+
+public class Generator {
+
+    private static char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'};
+
+    public Generator() {
+
+    }
+
+    public String generate(ReferenceRepository rep, Reference ref) {
+        String key = ref.bibtexKey = ref.author.substring(0, 1) + ref.year;
+
+        if (rep.findExistingBibtexKey(key)
+                .size() > 0) {
+            for (int i = 0; i < 6; i++) {
+                key = key + alphabet[i];
+                if (rep.findExistingBibtexKey(key).size() > 0) {
+                    key = key.substring(0, key.length() - 1);
+                } else {
+                    break;
+                }
+
+            }
+        }
+
+        return key;
+    }
+
+}
diff --git a/src/main/resources/templates/create.html b/src/main/resources/templates/create.html
deleted file mode 100644
index 6c07fd6..0000000
--- a/src/main/resources/templates/create.html
+++ /dev/null
@@ -1,77 +0,0 @@
-<!DOCTYPE html>
-<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
-    <head>
-        <title>Article</title>
-        <meta charset="UTF-8" />
-    </head>
-    <body>
-        <div></div>
-
-        <h1>Add reference</h1>
-
-        <form action="#" th:action="@{/references}" th:object="${reference}" method="POST">
-
-<table> 
-        <tr>
-            <td>Author: </td>
-            <td><input type="text" th:field="*{author}" /></td>
-            <td th:if="${#fields.hasErrors('author')}" th:errors="*{author}">Validation error</td>
-        </tr>
-    
-        <tr>
-            <td>Title: </td>
-            <td><input type="text" th:field="*{title}" /></td>
-             <td th:if="${#fields.hasErrors('title')}" th:errors="*{title}">Validation error</td>
-        </tr>
-            
- 	<tr>
-            <td>Journal: </td>
-            <td><input type="text" th:field="*{journal}" /></td>
-             <td th:if="${#fields.hasErrors('journal')}" th:errors="*{journal}">Validation error</td>
-        </tr>
-    
-        <tr>
-            <td>Volume: </td>
-            <td><input type="text" th:field="*{volume}" /></td>
-             <td th:if="${#fields.hasErrors('volume')}" th:errors="*{volume}">Validation error</td>
-        </tr>
-    
-        <tr>
-            <td>Number: </td>
-            <td><input type="text" th:field="*{number}" /></td>
-             <td th:if="${#fields.hasErrors('number')}" th:errors="*{number}">Validation error</td>
-        </tr>
-
-	<tr>
-            <td>Publishing year: </td>
-            <td><input type="text" th:field="*{year}" /></td>
-             <td th:if="${#fields.hasErrors('year')}" th:errors="*{year}">Validation error</td>
-        </tr>
-    
-        <tr>
-            <td>Pages: </td>
-            <td><input type="text" th:field="*{startPage}" />-<input type="text" th:field="*{endPage}" /></td>
-            <td th:if="${#fields.hasErrors('startPage')}" th:errors="*{startPage}">Validation error</td>
-             <td th:if="${#fields.hasErrors('endPage')}" th:errors="*{endPage}">Validation error</td>
-        </tr>
-
-        <tr>
-            <td>Publisher: </td>
-            <td><input type="text" th:field="*{publisher}" /></td>
-            <td th:if="${#fields.hasErrors('publisher')}" th:errors="*{publisher}">Validation error</td>
-        </tr>
-    
-        <tr>
-            <td>Address: </td>
-            <td><input type="text" th:field="*{address}" /></td>
-            <td th:if="${#fields.hasErrors('address')}" th:errors="*{address}">Validation error</td>
-        </tr>
-
-        <tr>
-            <td><button type="submit">Submit</button></td>
-        </tr>
-    </table>
-
-        </form>
-    </body>
-</html>
diff --git a/src/test/easyb/new_articleReference_creation.story b/src/test/easyb/new_articleReference_creation.story
index d6ebac4..3be0400 100644
--- a/src/test/easyb/new_articleReference_creation.story
+++ b/src/test/easyb/new_articleReference_creation.story
@@ -8,14 +8,14 @@ import org.openqa.selenium.htmlunit.HtmlUnitDriver;
 description 'An user can add a new article'
 
 scenario "Article creation succesfull with valid values", {
-   given 'created', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi artikkeli"));       
         element.click();       
     }
 
-    when 'created', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("S04");
         element = driver.findElement(By.name("author"));
@@ -30,7 +30,6 @@ scenario "Article creation succesfull with valid values", {
         element.sendKeys("20");
         element = driver.findElement(By.name("publisher"));
         element.sendKeys("Julkaisija");
-
         element = driver.findElement(By.tagName("button"));
         element.click();
     }
@@ -38,19 +37,19 @@ scenario "Article creation succesfull with valid values", {
     then 'article is created', {
         driver.getPageSource().contains("Reference created").shouldBe true
     }
+
 }
 scenario "Article creation succesfull with valid values and check list page", {
-   given 'created', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi artikkeli"));       
         element.click();       
     }
-when 'move to list page', {
- element = driver.findElement(By.name("bibtexKey"));
-        element.sendKeys("S06");
+when 'Values entered and submit clicked', {
+
         element = driver.findElement(By.name("author"));
-        element.sendKeys("Kirjoittaja");
+        element.sendKeys("Vihavainen");
         element = driver.findElement(By.name("title"));
         element.sendKeys("Otsikko");
         element = driver.findElement(By.name("article.journal"));
@@ -61,7 +60,8 @@ when 'move to list page', {
         element.sendKeys("20");
         element = driver.findElement(By.name("publisher"));
         element.sendKeys("Julkaisija");
-
+        element = driver.findElement(By.name("year"));
+        element.sendKeys("2016");
         element = driver.findElement(By.tagName("button"));
         element.click();
        element = driver.findElement(By.linkText("Kaikki lähteet"));       
@@ -69,7 +69,7 @@ when 'move to list page', {
     }
  
     then 'check list page', {
-        driver.getPageSource().contains("S06").shouldBe true
+        driver.getPageSource().contains("V2016").shouldBe true
     }
 }
 
@@ -81,7 +81,7 @@ scenario "Article creation unsuccesfull with missing values", {
         element.click();       
     }
 
-    when 'created', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("S05");
         
diff --git a/src/test/easyb/new_bookReference_creation.story b/src/test/easyb/new_bookReference_creation.story
index dd9fce6..ed960f5 100644
--- a/src/test/easyb/new_bookReference_creation.story
+++ b/src/test/easyb/new_bookReference_creation.story
@@ -8,14 +8,14 @@ import org.openqa.selenium.htmlunit.HtmlUnitDriver;
 description 'An user can add a new book'
 
 scenario "Book creation succesfull with valid values", {
-   given 'created', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi kirja"));       
         element.click();       
     }
 
-    when 'created', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("W04");
         element = driver.findElement(By.name("author"));
@@ -30,19 +30,19 @@ scenario "Book creation succesfull with valid values", {
     }
  
     then 'book is created', {
-        driver.getPageSource().contains("Reference").shouldBe true
+        driver.getPageSource().contains("Reference created").shouldBe true
     }
 }
 
 scenario "Book creation unsuccesfull with missing values", {
-   given 'created', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi kirja"));       
         element.click();       
     }
 
-    when 'created', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("W05");
         
diff --git a/src/test/easyb/new_conferenceReference_creation.story b/src/test/easyb/new_conferenceReference_creation.story
index 1493dc7..62ebf7b 100644
--- a/src/test/easyb/new_conferenceReference_creation.story
+++ b/src/test/easyb/new_conferenceReference_creation.story
@@ -8,14 +8,14 @@ import org.openqa.selenium.htmlunit.HtmlUnitDriver;
 description 'An user can add a new conference'
 
 scenario "Conference creation succesfull with valid values", {
-   given 'Add new Conference', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi konferenssi"));       
         element.click();       
     }
 
-    when 'Adding new Conference', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("B06");
         element = driver.findElement(By.name("author"));
@@ -30,19 +30,19 @@ scenario "Conference creation succesfull with valid values", {
     }
  
     then 'Conference is created', {
-        driver.getPageSource().contains("Reference").shouldBe true
+        driver.getPageSource().contains("Reference created").shouldBe true
     }
 }
 
 scenario "Conference creation unsuccesfull with missing values", {
-   given 'Add new Conference', {
+   given 'Move to page', {
         driver = new HtmlUnitDriver();
         driver.get("http://localhost:8080");
         element = driver.findElement(By.linkText("Lisää uusi konferenssi"));       
         element.click();       
     }
 
-    when 'Adding new Conference', {
+    when 'Values entered and submit clicked', {
         element = driver.findElement(By.name("bibtexKey"));
         element.sendKeys("B07");
         
